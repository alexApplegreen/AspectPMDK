/*!
   \file transactionadvice.ah

   \brief Defines a set of advices used for guaranteeing transactional behavior
          on methods which modify the aopstack

   \author Alexander Tepe

   \date 20.08.2020
*/

#include <stdio.h>
#include <libpmemobj.h>
#include <assert.h>
#include "attribute.ah"

aspect transactions {

    pointcut transaction() = AOP::transactional();

    /*!
       \brief Advice which triggers before execution of push method of aopstack
              and handles transactional behavior of the function

       \param "Param description"
    */
    advice execution(transaction()) : around() {
        // Check if the annoated function returns something
        // assert that PMEMobjpool* and elements to persist are present in args
        // get PMEMobjpool*
        // get elements to persist and add to transaction
        // handle return?
        // handle transaction

        int num_args = tjp->args();
        assert(num_args > 0);

        // search oid in parameter list
        // TODO cast is not working
        int i = 0;
        PMEMoid obj;
        for (; i < num_args; i++) {
            void* arg = tjp->arg(i);
            obj = (PMEMoid)arg;
            if (!OID_IS_NULL(obj)) {
                break;
            }
        }
        // PMEMoid is arg with index i;
        PMEMobjpool* pool = pmemobj_pool_by_oid(obj);

        TX_BEGIN(pool) {
            pmemobj_tx_add_range_direct(&obj, sizeof(obj));
            tjp->proceed();
        } TX_ONABORT {
            // TODO
        } TX_END
    }
};
