/*!
   \file transactionadvice.ah

   \brief Defines a set of advices used for guaranteeing transactional behavior
          on methods which modify the aopstack

   \author Alexander Tepe

   \date 20.08.2020
*/

#include <stdio.h>
#include <libpmemobj.h>
#include <assert.h>
#include <setjmp.h>
#include "attribute.ah"
#include "../util/log.h"


aspect transactions {

    pointcut transaction() = AOP_C::transactional();

    /*!
       \brief Advice which triggers before execution of push method of aopstack
              and handles transactional behavior of the function

       \param "Param description"
    */
    advice execution(transaction()) : around() {

        int num_args = tjp->args();
        assert(num_args > 0 && transactional_attr_usage());

        // search oid in parameter list
        int i = 0;
        PMEMoid* obj;
        for (; i < num_args; i++) {
            obj = (PMEMoid*)tjp->arg(i);
            if (!OID_IS_NULL(*obj)) {
                break;
            }
        }
        if (OID_IS_NULL(*obj)) {
            transactional_attr_usage();
            log_warn("No Transactional Context provided");
            // Do not hinder the flow ot the program at this point
            tjp->proceed();
        }
        else {
            // PMEMoid is arg with index i;
            PMEMobjpool* pool = pmemobj_pool_by_oid(*obj);

            // wrap Transaction around function execution
            TX_BEGIN(pool) {
                pmemobj_tx_add_range(*obj, 0, sizeof(&obj));
                tjp->proceed();
            }
            TX_END
        }
    }
};
