#ifndef TRANSACTION_ADVICE_CPP_AH
#define TRANSACTION_ADVICE_CPP_AH

#include <libpmemobj++/pool.hpp>
#include <libpmemobj++/transaction.hpp>
#include <libpmemobj++/detail/common.hpp>
#include <libpmemobj++/experimental/self_relative_ptr.hpp>
#include <libpmemobj++/utils.hpp>
#include <libpmemobj++/experimental/self_relative_ptr.hpp>
#include "attribute_cpp.ah"
#include "../util/log.h"
#include "transactionSlice.ah"
#include <stdexcept>
#include <libpmemobj.h>
#include <type_traits>
#include <map>
#include <boost/any.hpp>

aspect transaction_CPP {

    pointcut transactionCPP() = AOP_CPP::transactionalCpp() && !"void %::dump()";

    advice transactionCPP() : slice cloned_members;

    // initially log all found members of class and persist members
    // TODO woher den Pool holen?
    advice construction(transactionCPP()) : after() {
        log_info("Instantiated persistent Aggregate. Members:");
        tjp->target()->dump();
    }

    // forbid referencing of members
    advice ref(transactionCPP()) : around() {
        // TODO durch AspectC++ Beta Funktion ersetzen?
        throw new std::runtime_error("Do not reference transactional data");
    }

    advice set(transactionCPP() && !"static % ...::%") : around() {
        log_debug("adding member %s to transaction", JoinPoint::signature());

        if (std::is_pointer<JoinPoint::Entity>::value) {
            // FIXME in JoinPoint::Entity steht NODE*. Ich brauche hier nur NODE
            pmem::obj::experimental::self_relative_ptr<JoinPoint::Entity>member_ptr(tjp->entity());
            *tjp->entity() = member_ptr;
        }
        else {
            // member is not a pointer:
            JoinPoint::Entity* const member = tjp->entity();
            try {
                pmem::obj::transaction::snapshot<JoinPoint::Entity>(member);
                tjp->proceed();
            }
            catch (pmem::transaction_error e) {
                log_warn(e.what());
                // Transaktion ist hier dann nichtmehr vollstÃ¤ndig.
                tjp->proceed();
            }
        }
    }

    advice execution(transactionCPP()) : around() {
        log_info("Wrapping function with transaction: %s", tjp->signature());

        auto pop = pmem::obj::pool_by_vptr(tjp->that());
        pmem::obj::transaction::run(pop, [&] {
            tjp->proceed();
        });
    }
};

#endif
