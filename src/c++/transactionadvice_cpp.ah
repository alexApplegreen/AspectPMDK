#ifndef TRANSACTION_ADVICE_CPP_AH
#define TRANSACTION_ADVICE_CPP_AH

#include <libpmemobj++/pool.hpp>
#include <libpmemobj++/transaction.hpp>
#include <libpmemobj++/detail/common.hpp>
#include <libpmemobj++/experimental/self_relative_ptr.hpp>
#include <libpmemobj++/make_persistent.hpp>
#include <libpmemobj++/utils.hpp>
#include "attribute_cpp.ah"
#include "../util/log.h"
#include "transactionSlice.ah"
#include <stdexcept>
#include <libpmemobj.h>
#include <type_traits>

aspect transaction_CPP {

    pointcut transactionCPP() = AOP_CPP::transactionalCpp() && !"void %::dump()" && !"% %::operator new(...)";

    advice transactionCPP() : slice cloned_members;

    // forbid referencing of members
    advice ref(transactionCPP()) : around() {
        // TODO durch AspectC++ Beta Funktion ersetzen?
        throw new std::runtime_error("Do not reference transactional data");
    }

    // set advice für Pointer
    advice set(transactionCPP() && !"static %...::%" && "%* ...::%") : around() {
        log_debug("setting member %s", JoinPoint::signature());
        typedef typename std::remove_pointer<JoinPoint::Entity>::type entity_type;

        auto member_ptr = new pmem::obj::experimental::self_relative_ptr<entity_type>(*tjp->arg<0>());
        *reinterpret_cast<pmem::obj::experimental::self_relative_ptr<entity_type>*>(tjp->entity()) = *member_ptr;
    }

    // set advice für nicht-pointer member
    advice set(transactionCPP() && !"static % ...::%") : around() {
        log_debug("adding member %s to transaction", JoinPoint::signature());
        JoinPoint::Entity* const member = tjp->entity();
        try {
            pmem::obj::transaction::snapshot<JoinPoint::Entity>(member);
            tjp->proceed();
        }
        catch (pmem::transaction_error e) {
            log_warn(e.what());
            // Transaktion ist hier dann nichtmehr vollständig.
            tjp->proceed();
        }
    }

    advice get(transactionCPP() && !"static %...::%" && "%* ...::%"): around() {
        log_debug("getting member %s", JoinPoint::signature());
        typedef typename std::remove_pointer<JoinPoint::Entity>::type entity_type;
        *tjp->result() = reinterpret_cast<pmem::obj::experimental::self_relative_ptr<entity_type>*>(tjp->entity())->get();
    }


    advice execution(transactionCPP()) : around() {
        log_info("Wrapping function with transaction: %s", tjp->signature());

        auto pop = pmem::obj::pool_by_vptr(tjp->that());
        pmem::obj::transaction::run(pop, [&] {
            tjp->proceed();
        });
    }
};

#endif
