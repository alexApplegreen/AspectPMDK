#ifndef TRANSACTION_SLICE_AH
#define TRANSACTION_SLICE_AH

#include "../util/JPTL.h"
#include "../util/log.h"
#include <type_traits>
#include <libpmemobj++/persistent_ptr.hpp>
#include <libpmemobj++/detail/common.hpp>
#include <libpmemobj++/experimental/self_relative_ptr.hpp>
#include <libpmemobj++/make_persistent.hpp>
#include <libpmemobj.h>
#include <new>
#include <cstdlib>

slice struct transactionslice {

public:

    void operator delete(void* ptr) {
        log_debug("persistent delete called on %s", JoinPoint::signature());
        pmem::obj::delete_persistent<JoinPoint::That>(*reinterpret_cast<pmem::obj::experimental::self_relative_ptr<JoinPoint::That>*>(ptr));
    }


    void* operator new(std::size_t count) {
        log_debug("persistent new called on %s", JoinPoint::signature());
        pmem::obj::persistent_ptr<JoinPoint::That> pptr;
        pptr = pmemobj_tx_alloc(count, pmem::detail::type_num<JoinPoint::That>());
        void* ptr = pptr.get();
        if (ptr) {
            return ptr;
        }
        else {
            throw new std::bad_alloc{};
        }
    }

    void* operator new(std::size_t count, void* ptr) {
        log_debug("persistent new called on %s", JoinPoint::signature());
        pmem::obj::persistent_ptr<JoinPoint::That> pptr;
        pptr = pmemobj_tx_alloc(count, pmem::detail::type_num<JoinPoint::That>());
        ptr = pptr.get();
        if (ptr) {
            return ptr;
        }
        else {
            throw new std::bad_alloc{};
        }
    }
};

#endif
